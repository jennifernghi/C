/*
 ============================================================================
 Name        : lab6.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>

#define SIZE 5

void change(int array[], int );
void printArray(int array[], int );
void countVowel(char string[], int array[], size_t);
int main(void) {
	/*int array[SIZE] = {1,2,3};

	printf("%s : ", "Before");
	printArray(array, SIZE);
	puts("");

	printf("%s : ", "After");
	change(array, SIZE);
	printArray(array, SIZE);
	puts("");*/

	char string[] = "Good morning, students!";
	printf("%s\n", string);
	int a[5]={0};
	countVowel(string, a, sizeof(string));




	//printArray(a,SIZE);


}

void change(int array[], int const size){
	int * const arrayPtr = array;
	for(size_t i =0; i<size; i++){
		*(arrayPtr + i) = 2 * *(arrayPtr+i); // + i allocate correct offset
	}
}

void printArray(int array[], int const size){
	 const int * const arrayPtr = array;
	for(size_t i =0; i<size; i++){
		printf("%d ", *(arrayPtr + i));
	}
}


void countVowel(char string[], int array[], size_t stringSize){
	char vowels[] = {'a', 'o', 'u', 'i', 'e'};
	void max(int array[], int, int*, int*); // prototype, max(), max() only used in this method
	int count =0;
	for(size_t vowel=0; vowel<SIZE; vowel++){
		for(size_t j =0; j < stringSize; j++){
			if(string[j]==vowels[vowel]){
				array[vowel] += 1;
				++count;
			}
		}

		//print repetitions of each vowel in the string
		if(array[vowel]!=0){
			printf("%c appears %d times\n", vowels[vowel], array[vowel]);
		}
	}

	printf("Total vowels: %d\n", count);

	int maxValue, maxIndex;

	//find most-frequent vowel
	max(array, SIZE, &maxValue, &maxIndex);

	printf("the most-frequent vowel: %c (%d times)\n", vowels[maxIndex], maxValue);

}

void max(int array[], int size, int *valuePtr, int *indexPtr ){
	*valuePtr = array[0];
	*indexPtr = 0;
	for(size_t i =0; i<size; i++){
		if(array[i]>*valuePtr){
			*valuePtr=array[i];
			*indexPtr=i;
		}
	}

}

